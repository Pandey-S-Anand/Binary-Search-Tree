/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

//Naive approach
 
class Solution {
    /*
    * The crux of the solution: Since the inorder traversal of a BST gives us sorted values,
    * the minimum absolute difference will always be between two consecutive values in this sorted list.
    */
    public int getMinimumDifference(TreeNode root) {
        List<Integer> inorderTraversal = new ArrayList<>(); // List to store the inorder traversal of the tree
        performInorderTraversal(root, inorderTraversal); // Perform inorder traversal to collect node values
        return findMinAbsDifference(inorderTraversal); // Find and return the minimum absolute difference
    }

    private void performInorderTraversal(TreeNode root, List<Integer> inorderTraversal) {
        if (root == null) {
            return;
        }

        performInorderTraversal(root.left, inorderTraversal);
        inorderTraversal.add(root.val);
        performInorderTraversal(root.right, inorderTraversal);
    }

    private int findMinAbsDifference(List<Integer> inorderTraversal) {
        int minAbsDiff = Integer.MAX_VALUE; // Initialize with the largest possible value

        for (int i = 1; i < inorderTraversal.size(); i++) {
            // Calculate the absolute difference between consecutive values and update the minimum difference
            minAbsDiff = Math.min(minAbsDiff, Math.abs(inorderTraversal.get(i) - inorderTraversal.get(i - 1)));
        }

        return minAbsDiff; // Return the minimum absolute difference found
    }
}


//Optimal approach

class Solution {
    private TreeNode previousNode; // To store the the previous node during inorder traversal
    private int minAbsoluteDifference; // To store the minimum absolute difference found

    public int getMinimumDifference(TreeNode root) {
        previousNode = null; // Initialize previous node value to null
        minAbsoluteDifference = Integer.MAX_VALUE; // Initialize minimum absolute difference to maximum value
        inorderTraversal(root); // Perform inorder traversal to calculate the minimum difference
        return minAbsoluteDifference;
    }

    private void inorderTraversal(TreeNode currentNode) {
        if (currentNode == null) {
            return; // Base case: If the current node is null, return
        }

        // Recursively traverse the left subtree
        inorderTraversal(currentNode.left);

        if (previousNode != null) { // Skip the first node where previous node is not present
            // Find the difference between current node and the previous node value in traversal
            minAbsoluteDifference = Math.min(minAbsoluteDifference, Math.abs(currentNode.val - previousNode.val)); // Update min difference
        }

        // Update previous node value to the current node's 
        previousNode = currentNode;

        // Recursively traverse the right subtree
        inorderTraversal(currentNode.right);
    }
}
