/**
 * ðŸ§  Step-by-step BST Construction from Level Order:
 *
 * Input Level Order Array: [7, 4, 12, 3, 6, 8, 1, 5, 10]
 *
 * Step 1: Insert 7 (root)
 * Tree:
 *        7
 *
 * Step 2: Insert 4 (left of 7 â†’ 4 < 7)
 * Tree:
 *        7
 *       /
 *      4
 *
 * Step 3: Insert 12 (right of 7 â†’ 12 > 7)
 * Tree:
 *        7
 *       / \
 *      4   12
 *
 * Step 4: Insert 3 (left of 4 â†’ 3 < 4)
 * Tree:
 *        7
 *       / \
 *      4   12
 *     /
 *    3
 *
 * Step 5: Insert 6 (right of 4 â†’ 6 > 4 && 6 < 7)
 * Tree:
 *        7
 *       / \
 *      4   12
 *     / \
 *    3   6
 *
 * Step 6: Insert 8 (left of 12 â†’ 8 > 7 && 8 < 12)
 * Tree:
 *        7
 *       / \
 *      4   12
 *     / \  /
 *    3   6 8
 *
 * Step 7: Insert 1 (left of 3 â†’ 1 < 3)
 * Tree:
 *        7
 *       / \
 *      4   12
 *     / \  /
 *    3   6 8
 *   /
 *  1
 *
 * Step 8: Insert 5 (left of 6 â†’ 5 < 6 && 5 > 4)
 * Tree:
 *        7
 *       / \
 *      4   12
 *     / \  /
 *    3   6 8
 *   /   /
 *  1   5
 *
 * Step 9: Insert 10 (right of 8 â†’ 10 > 8 && 10 < 12)
 * Tree:
 *        7
 *       / \
 *      4   12
 *     / \  /
 *    3   6 8
 *   /   /   \
 *  1   5    10
 *
 * âœ… Final BST Constructed from Level Order!
 */


class GFG {
    private static class NodeInfo {
        private Node node;   // Current node being processed
        private int low;     // Lower bound for valid child values
        private int high;    // Upper bound for valid child values

        NodeInfo(Node node, int low, int high) {
            this.node = node;
            this.low = low;
            this.high = high;
        }
    }

    public Node constructBST(int[] arr) {
        // Step 1: Initialize the root using the first element
        Node root = new Node(arr[0]);

        // Step 2: Create a queue to simulate level-order construction. Each queue entry stores the parent node and valid range for it's child nodes.
        Queue<NodeInfo> queue = new ArrayDeque<>();
        queue.offer(new NodeInfo(root, Integer.MIN_VALUE, Integer.MAX_VALUE));

        int i = 1; // Start from the second element in the array

        // Step 3: Process the array elements one by one
        while (i < arr.length) {
            NodeInfo nodeInfo = queue.poll();
            Node node = nodeInfo.node;
            int low = nodeInfo.low;
            int high = nodeInfo.high;

            /**
             * Try to place arr[i] as the left child:
             * - It must lie within [low, node.data)
             */
            if (arr[i] > low && arr[i] < node.data) {
                Node leftChild = new Node(arr[i]);
                node.left = leftChild;

                // Add this left child to the queue with updated bounds
                queue.offer(new NodeInfo(leftChild, low, node.data));
                i++;
            }

            /**
             * Try to place arr[i] as the right child:
             * - It must lie within (node.data, high)
             */
            if (i < arr.length && arr[i] > node.data && arr[i] < high) {
                Node rightChild = new Node(arr[i]);
                node.right = rightChild;

                // Add this right child to the queue with updated bounds
                queue.offer(new NodeInfo(rightChild, node.data, high));
                i++;
            }
        }

        return root;
    }
}
