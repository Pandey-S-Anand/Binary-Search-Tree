/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
 

class Solution {
    public TreeNode trimBST(TreeNode root, int low, int high) {
        // Base case: If the current node is null, there's nothing to trim, so return null.
        if (root == null) {
            return null;
        }

        /*
         * If the current node's value is less than 'low', it means the entire left
         * subtree of this node will also have values smaller than 'low'.
         * As a result, we discard this node and its left subtree, and recursively trim
         * the right subtree.
         */
        if (root.val < low) {
            root = trimBST(root.right, low, high);
            return root;
        }

        /*
         * If the current node's value is greater than 'high', it means the entire right
         * subtree of this node will also have values greater than 'high'.
         * As a result, we discard this node and its right subtree, and recursively trim
         * the left subtree.
         */
        if (root.val > high) {
            root = trimBST(root.left, low, high);
            return root;
        }

        // If the current node's value is within the valid range [low, high], we need to recursively trim both its left and right subtrees.
        root.left = trimBST(root.left, low, high);
        root.right = trimBST(root.right, low, high);

        return root;
    }
}
