/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

class Solution {
    public int rangeSumBST(TreeNode root, int low, int high) {
        // Base case: If the tree is empty, return 0
        if (root == null) {
            return 0;
        }

        /*
         * If the current node's value is less than 'low',
         * then all nodes in its left subtree will also be less than 'low'.
         * So, we discard the left subtree and only check the right subtree.
         */
        if (root.val < low) {
            root = root.right;
            return rangeSumBST(root, low, high);
        }

        /*
         * If the current node's value is greater than 'high',
         * then all nodes in its right subtree will also be greater than 'high'.
         * So, we discard the right subtree and only check the left subtree.
         */
        if (root.val > high) {
            root = root.left;
            return rangeSumBST(root, low, high);
        }

        /*
        * If the current node's value falls within the range [low, high] (root.val >= low && root.val <= high)
        * Add this node value to the sum and recursively process both left and right subtrees
        */
        return root.val + rangeSumBST(root.left, low, high) + rangeSumBST(root.right, low, high);
    }
}
