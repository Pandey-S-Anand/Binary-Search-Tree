//Bruteforce approach

class Solution {
    /**
     * Inorder traversal of a Binary Search Tree (BST) yields the elements in sorted order.
     * This method returns the first element of that sorted list,
     * which corresponds to the minimum value in the BST.
     */
    int minValue(Node root) {
        // Edge case: if the tree is empty, return -1 as an invalid indicator
        if (root == null) {
            return -1;
        }

        // Step 1: Create a list to store the inorder traversal (sorted elements of BST)
        List<Integer> inorder = new ArrayList<>();

        // Step 2: Fill the list with inorder traversal of the BST
        findInorderTraversal(root, inorder);

        // Step 3: The first element in inorder traversal of a BST is the minimum value
        return inorder.get(0);
    }

    private void findInorderTraversal(Node root, List<Integer> inorder) {
        if (root == null) {
            return;
        }

        // Traverse left subtree
        findInorderTraversal(root.left, inorder);

        // Visit current node
        inorder.add(root.data);

        // Traverse right subtree
        findInorderTraversal(root.right, inorder);
    }
}


//Optimal approach

class Solution {
    int minValue(Node root) {
        // If the tree is empty, return -1 (or any appropriate value)
        if (root == null) {
            return -1;
        }

        // Traverse to the leftmost node
        while (root.left != null) {
            root = root.left;
        }

        // The leftmost node contains the minimum value
        return root.data;
    }
}
