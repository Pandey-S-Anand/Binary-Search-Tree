//Naive approach

class GFG {
    public Node constructTree(int[] postorder, int n) {
        return buildBSTFromPostorder(postorder, 0, n - 1);
    }

    private Node buildBSTFromPostorder(int[] postorder, int low, int high) {
        // Base case: empty subtree
        if (low > high) {
            return null;
        }

        // Last element in the current range is the root of the subtree
        Node root = new Node(postorder[high]);

        // Identify the boundary of the left subtree
        int leftSubtreeEnd = high - 1;
        while (leftSubtreeEnd >= low && postorder[leftSubtreeEnd] > postorder[high]) {
            leftSubtreeEnd--;
        }

        // Recursively build the right subtree (values > root)
        root.right = buildBSTFromPostorder(postorder, leftSubtreeEnd + 1, high - 1);

        // Recursively build the left subtree (values < root)
        root.left = buildBSTFromPostorder(postorder, low, leftSubtreeEnd);

        return root; // Return the constructed subtree
    }
}



//Optimal approach

class GFG {
    // Index to keep track of the current node in postorder traversal
    private int index;

    public Node constructTree(int postorder[], int n) {
        // Initialize index to point to the last element (root of BST in postorder)
        index = n - 1;
        // Call helper function with initial range of values
        return constructTree(postorder, Integer.MIN_VALUE, Integer.MAX_VALUE);
    }
    
    private Node constructTree(int postorder[], int min, int max) {
        // Base condition: if index is out of bounds or current value is not in the valid range
        if (index < 0 || !(postorder[index] > min && postorder[index] < max)) {
            return null; 
        }
        
        // Fetch the current value from postorder and decrement index
        int value = postorder[index--];
        
        // Create a new node with this value
        Node node = new Node(value);
        
        // Construct the right subtree before the left subtree because postorder traversal is: Left -> Right -> Root
        node.right = constructTree(postorder, value, max);
        
        // Construct the left subtree
        node.left = constructTree(postorder, min, value);
        
        // Return the constructed node
        return node;
    }
}
