//Brutefroce approach

class Solution {
    private Node previousInorderNode; // Keeps track of the previous node visited during inorder traversal
    private int currentBstNodeCount; // Tracks the number of nodes in a currently valid BST subtree
    private int maxBstSubtreeSize; // Stores the size of the largest BST subtree found so far

    /**
     * Returns the size of the largest BST subtree within a given binary tree.
     */
    int largestBst(Node root) {
        maxBstSubtreeSize = 0; // Initialize max size to 0
        findLargestBstSubtree(root);
        return maxBstSubtreeSize;
    }

    //Recursively checks every subtree rooted at each node and updates the size of the largest BST found.
    private void findLargestBstSubtree(Node node) {
        if (node == null) {
            return;
        }

        // Check if the current subtree is a valid BST and get its size
        int bstSize = validateAndCountIfBst(node);

        // If it is a valid BST, update max size
        if (bstSize != -1) {
            maxBstSubtreeSize = Math.max(maxBstSubtreeSize, bstSize);
        }

        // Recurse for left and right children
        findLargestBstSubtree(node.left);
        findLargestBstSubtree(node.right);
    }

    /**
     * Validates if a subtree rooted at the current node is a BST using inorder traversal.
     * If valid, returns the size of the subtree; otherwise returns -1.
     */
    private int validateAndCountIfBst(Node node) {
        currentBstNodeCount = 0; // Reset node count for this subtree
        previousInorderNode = null; // Reset inorder state

        if (isBstUsingInorder(node)) {
            return currentBstNodeCount; // Return size if it's a valid BST
        }

        return -1; // Not a valid BST
    }

    /**
     * Performs an inorder traversal to verify whether the subtree is a valid BST
     * by ensuring that node values appear in strictly increasing order.
     * While traversing, it also maintains a counter to track the number of nodes.
     * If the subtree is valid, the counter reflects the size of the current BST.
     */
    private boolean isBstUsingInorder(Node node) {
        if (node == null) {
            return true;
        }

        // Check left subtree
        if (!isBstUsingInorder(node.left)) {
            return false;
        }

        // Check BST property: current node must be greater than previous
        if (previousInorderNode != null && previousInorderNode.data >= node.data) {
            return false;
        }

        // Update previous and count this node
        previousInorderNode = node;
        currentBstNodeCount++;

        // Check right subtree
        return isBstUsingInorder(node.right);
    }
}



//Optimal approach

class Solution {
    // Helper class to store information about a subtree
    private static class NodeInfo {
        private boolean isBst; // Tells whether the subtree rooted at the node is a valid BST
        private int max;       // Maximum value in the subtree
        private int min;       // Minimum value in the subtree
        private int size;      // Size (number of nodes) in the subtree

        // Constructor for leaf or internal nodes with full data
        NodeInfo(boolean isBst, int max, int min, int size) {
            this.isBst = isBst;
            this.max = max;
            this.min = min;
            this.size = size;
        }

        // Constructor for null nodes (base case) â€“ considered valid BSTs with extreme min/max
        NodeInfo(boolean isBst) {
            this.isBst = isBst;
            this.max = Integer.MIN_VALUE;
            this.min = Integer.MAX_VALUE;
            this.size = 0;
        }
    }

    // Variable to track the maximum size of BST found in the binary tree
    private int maxSize;

    int largestBst(Node root) {
        maxSize = 0; // Initialize the maximum BST size to 0
        largestBstSize(root); // Trigger post-order traversal to compute BST sizes
        return maxSize; // Return the largest BST size found
    }

    private NodeInfo largestBstSize(Node root) {
        // Base case: null node is treated as a valid BST with size 0
        if (root == null) {
            return new NodeInfo(true);
        }

        // Recursively get BST info from left and right subtrees
        NodeInfo left = largestBstSize(root.left);
        NodeInfo right = largestBstSize(root.right);

        /**
         * Check if current node with its left and right subtrees forms a valid BST:
         *  - left and right subtrees must themselves be BSTs
         *  - root's data must be greater than the max value in left subtree
         *  - root's data must be less than the min value in right subtree
         */
        if (left.isBst && right.isBst && root.data > left.max && root.data < right.min) {

            // Compute the size of current BST = left.size + right.size + 1 (for current root)
            int size = left.size + right.size + 1;

            /**
             * Compute new max and min for the current subtree:
             * - max = max value between root and right subtree
             *   (root might be the max if right is null)
             * - min = min value between root and left subtree
             *   (root might be the min if left is null)
             */
            int max = Math.max(root.data, right.max);
            int min = Math.min(root.data, left.min);

            // Update global maxSize if current BST is larger
            maxSize = Math.max(maxSize, size);

            // Return new NodeInfo representing this subtree as a valid BST
            return new NodeInfo(true, max, min, size);
        }

        /**
         * If the subtree is not a valid BST, return isBst = false
         * Other fields are irrelevant for invalid BSTs, so we use the basic constructor
         */
        return new NodeInfo(false);
    }
}
