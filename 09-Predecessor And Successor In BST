/*
 * To find the inorder predecessor and successor of a node, the idea is to traverse the BST while tracking potential 
 * predecessor and successor candidates. Once the target node is found:
 *
 * - The inorder predecessor is determined as follows:
 *      a) If the target node has a left subtree, the predecessor is the rightmost node in that subtree.
 *      b) Otherwise, it is the last node encountered that is smaller than the target's value.
 *
 * - The inorder successor is determined as follows:
 *      a) If the target node has a right subtree, the successor is the leftmost node in that subtree.
 *      b) Otherwise, it is the last node encountered that is larger than the target's value.
 *
 * The inorder predecessor (left → root → right) is the previous node of the given node in the inorder traversal 
 * of the BST. Similarly, the inorder successor is the next node of the given node in the inorder traversal.
 *
 * **Important Note:**
 * The inorder traversal of a Binary Search Tree (BST) always produces a sorted sequence in **ascending order**.
 * This means that:
 * - The inorder predecessor of a node is the largest value smaller than the node.
 * - The inorder successor of a node is the smallest value larger than the node.
 *
 * Example BST:
 *
 *               50
 *             /    \
 *           30      70
 *          /  \    /  \
 *        20   40  60   80
 *       /         / \
 *     10        55  65
 *
 * For instance, if we search for the key 60:
 * - The inorder predecessor would be 55 (rightmost node of the left subtree of 60).
 * - The inorder successor would be 65 (leftmost node of the right subtree of 60).
 *
 * Similarly, if we search for the key 55:
 * - Inorder Predecessor of 55: 50
 * - Inorder Successor of 55: 60
 *
 */

//Bruteforce approach

class Solution {
    private Node inorderPredecessor;
    private Node inorderSuccessor;

    public ArrayList<Node> findPreSuc(Node root, int key) {
        inorderPredecessor = inorderSuccessor = null;
        List<Node> inorderTraversal = new ArrayList<>();

        //Find the inorderTraversal
        findInorderTraversal(root, inorderTraversal);

        // Perform binary search on the sorted list, as the inorder traversal of a BST always results in a strictly ascending order, to find the predecessor and successor of the key.
        findPredecessorSuccessor(inorderTraversal, key);
        return new ArrayList<>(Arrays.asList(inorderPredecessor,inorderSuccessor));
    }

    private void findInorderTraversal(Node root, List<Node> inorderTraversal) {
        if (root == null) {
            return;
        }

        findInorderTraversal(root.left, inorderTraversal);

        inorderTraversal.add(root);

        findInorderTraversal(root.right, inorderTraversal);
    }

    private void findPredecessorSuccessor(List<Node> arr, int key) {
        int low = 0, high = arr.size() - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            // Check if the key is found at the mid index.
            if (arr.get(mid).data == key) {
                // If the key is found, check for predecessor and successor.

                // If the predecessor exists (i.e., there is an element before the current element).
                if (mid - 1 >= 0) {
                    inorderPredecessor = arr.get(mid - 1); // The predecessor is the element before the mid element.
                }

                // If the successor exists (i.e., there is an element after the current element).
                if (mid + 1 < arr.size()) {
                    inorderSuccessor = arr.get(mid + 1); // The successor is the element after the mid element.
                }

                // Return as we've found the key and its predecessor and successor.
                return;
            }

            /*
            * When the key is not present in the tree, we still want to find the closest 
            * values smaller and larger than the key — i.e., the inorder predecessor and successor.
            *
            * While performing binary search:
            * - If key < arr[mid].data:
            *     We store arr[mid] as a potential successor and search left.
            * - If key > arr[mid].data:
            *     We store arr[mid] as a potential predecessor and search right.
            *
            * This ensures that even if the key is not found,
            * we still retain the closest smaller and greater values as predecessor and successor.
            */

            // If the key is smaller than the element at mid, then the mid element is a potential successor, 
            if (key < arr.get(mid).data) {
                inorderSuccessor = arr.get(mid); // Set the current mid element as a possible successor.
                high = mid - 1; // Narrow the search to the left half of the list.
            } else { // If the key is greater than the element at mid, then the mid element is a potential predecessor, 
                inorderPredecessor = arr.get(mid); // Set the current mid element as a possible predecessor.
                low = mid + 1; // Narrow the search to the right half of the list.
            }
        }
    }
}


//Optimal approach

class Solution {
    private Node inorderPredecessor;
    private Node inorderSuccessor;

    public ArrayList<Node> findPreSuc(Node root, int key) {
        inorderPredecessor = inorderSuccessor = null;
        findPredecessorSuccessor(root, key);
        return new ArrayList<>(Arrays.asList(inorderPredecessor, inorderSuccessor));
    }

    private void findPredecessorSuccessor(Node root, int key) {
        // Base case: If the root is null, simply return.
        if (root == null) {
            return;
        }

        /*
        * When the key is not present in the tree, we still want to find the closest 
        * values smaller and larger than the key — i.e., the inorder predecessor and successor.
        *
        * While performing binary search:
        * - If key  < node.data:
        *     We store 'node' as a potential successor and search left.
        * - If key >  node.data:
        *     We store 'node' as a potential predecessor and search right.
        *
        * This ensures that even if the key is not found,
        * we still retain the closest smaller and greater values as predecessor and successor.
        */

        // If the key is smaller than the current node, move to the left subtree.
        if (key < root.data) {
            // The current node is a potential successor.
            inorderSuccessor = root;
            findPredecessorSuccessor(root.left, key);
            return;
        }

        // If the key is greater than the current node, move to the right subtree.
        if (key > root.data) {
            // The current node is a potential predecessor.
            inorderPredecessor = root;
            findPredecessorSuccessor(root.right, key);
            return;
        }

        // If the key is found at the current node.

        // Find the inorder predecessor: The rightmost node in the left subtree (if exists).
        if (root.left != null) {
            Node node = root.left;
            while (node.right != null) {
                node = node.right;
            }
            inorderPredecessor = node;
        }

        // Find the inorder successor: The leftmost node in the right subtree (if exists).
        if (root.right != null) {
            Node node = root.right;
            while (node.left != null) {
                node = node.left;
            }
            inorderSuccessor = node;
        }
    }
}
