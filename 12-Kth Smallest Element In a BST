/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

//Bruteforce approach
 
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        List<Integer> inorderTraversal = new ArrayList<>();

        // Perform in-order traversal (which yields elements in sorted order for a BST)
        findInorderTraversal(root, inorderTraversal);

        // The k-th smallest element is at index (k - 1) in the sorted list.
        return inorderTraversal.get(k - 1);
    }

    private void findInorderTraversal(TreeNode root, List<Integer> inorderTraversal) {
        if (root == null) {
            return;
        }

        findInorderTraversal(root.left, inorderTraversal);

        inorderTraversal.add(root.val);

        findInorderTraversal(root.right, inorderTraversal);
    }
}


//Optimal approach

class Solution {
    // This variable will store the kth smallest element once found
    private int kthSmallestElement;

    public int kthSmallest(TreeNode root, int k) {
        // Use an array of size 1 to act as a mutable counter for 'k'
        int[] counter = new int[] { k };
        findKthSmallest(root, counter);
        return kthSmallestElement;
    }

    private void findKthSmallest(TreeNode root, int[] k) {
        if (root == null) {
            return;
        }

        // Traverse left subtree first (smaller values)
        findKthSmallest(root.left, k);

        // Visit current node: decrement the counter
        k[0]--;
        if (k[0] == 0) {
            // If counter reaches 0, we've found the kth smallest element
            kthSmallestElement = root.val;
            return;
        }

        // Traverse right subtree (larger values)
        findKthSmallest(root.right, k);
    }
}
