/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

/*
 * Deleting a node in a Binary Search Tree (BST) involves two primary steps:
 * 
 * 1. Search for the node:
 *    - Traverse the BST using its properties (values less than the current node go to the left,
 *      values greater go to the right) to locate the node to be deleted.
 * 
 * 2. Delete the node based on its structure:
 *    - Case 1: Leaf Node (No Children)
 *      - Simply remove the node by returning `null`.
 *
 *    - Case 2: One Child (Either Left or Right)
 *      - Replace the node with its non-null child.
 *
 *    - Case 3: Two Children
 *      - Replace the node with either:
 *          a) Inorder Predecessor (largest node in the left subtree)
 *             - This node is greater than all the remaining values in the left subtree and smaller than
 *               all the values in the right subtree.
 *             - Swap its value with the node to be deleted.
 *             - Recursively delete the inorder predecessor.
 *
 *          b) Inorder Successor (smallest node in the right subtree)
 *             - This node is smaller than all the remaining values in the right subtree and greater than
 *               all the values in the left subtree.
 *             - Swap its value with the node to be deleted.
 *             - Recursively delete the inorder successor.
 *
 * Using either approach in Case 3 ensures that the BST properties remain intact after deletion.
 *
 * -------------------------
 * Example BST:
 *
 *               50
 *             /    \
 *           30      70
 *          /  \    /  \
 *        20   40  60   80
 *       /    /    / \
 *     10    35   55  65
 *
 * In this example:
 * - If we delete the node with value 50 (which has two children), we have two choices:
 *     1. Replace it with its inorder predecessor (the largest node in the left subtree, which is 40).
 *     2. Replace it with its inorder successor (the smallest node in the right subtree, which is 55).
 *
 * Both replacements ensure that properties of the BST retains its correct ordering and structure after deletion.
 */

class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        // Base case: If the tree is empty, just return null.
        if (root == null) {
            return null;
        }

        // If the key to be deleted is smaller than the root's value, then it lies in the left subtree.
        if (key < root.val) {
            root.left = deleteNode(root.left, key);
        } else if (key > root.val) { // If the key to be deleted is greater than the root's value, then it lies in the right subtree.
            root.right = deleteNode(root.right, key);
        } else { // If key is same as root's value, then this is the node to be deleted.
            // Case 1: Node is a leaf (has no children).
            if (root.left == null && root.right == null) {
                return null;
            }

            // Case 2: Node has only one child.
            // If the left child is null, return the right child.
            if (root.left == null) {
                return root.right;
            }
            // If the right child is null, return the left child.
            if (root.right == null) {
                return root.left;
            }

            // Case 3: Node has two children.
            // Find the inorder predecessor (largest node in the left subtree).
            TreeNode inorderPredecessor = findInorderPredecessor(root.left);
            // Replace the value of the node to be deleted with the inorder predecessor's value.
            root.val = inorderPredecessor.val;
            /*
             * The inorder predecessor is the rightmost node in the left subtree,
             * so it never has a right child.
             * It can be:
             * 1. A leaf node (no children).
             * 2. A node with only a left child.
             *
             * We use recursion to delete it because:
             * - It handles both cases safely.
             * - It updates links correctly without extra parent tracking.
             */
            // Recursively delete the inorder predecessor since its value is now copied.
            root.left = deleteNode(root.left, inorderPredecessor.val);
        }

        // Return the (possibly updated) root pointer.
        return root;
    }

    private TreeNode findInorderPredecessor(TreeNode node) {
        // Traverse to the rightmost node.
        while (node.right != null) {
            node = node.right;
        }
        return node;
    }
}
