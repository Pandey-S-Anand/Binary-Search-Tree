/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

//Naive approach

class Solution {
    // This variable stores the previous node encountered during the inorder traversal.
    private TreeNode previousNode; 

    // This variable holds the sum of node values for the current valid BST subtree.
    private int bstSum;  

    // This variable tracks the maximum sum of any valid BST subtree found in the tree.
    private int maxSum; 

    public int maxSumBST(TreeNode root) {
        maxSum = 0;  // Initialize maxSum to 0 before starting the process
        findLargestBstSumInTree(root);
        return maxSum;
    }

    private void findLargestBstSumInTree(TreeNode root) {
        if (root == null) {
            return; // Base case: If the node is null, simply return
        }

        // Check if the subtree rooted at this node is a valid BST, and get the sum of its node values if it is valid.
        int bstSum = getBstSumIfValid(root);
        
        // If bstSum is not -1, it means the subtree is a valid BST. Update maxSum if this subtree's sum is greater than the current maxSum.
        if (bstSum != -1) {
            maxSum = Math.max(maxSum, bstSum);
        }

        // Recursively check the left and right subtrees.
        findLargestBstSumInTree(root.left);
        findLargestBstSumInTree(root.right);
    }

    private int getBstSumIfValid(TreeNode root) {
        bstSum = 0;          // Reset the sum for the new subtree
        previousNode = null; // Reset the previous node pointer for inorder traversal

        // If the subtree is a valid BST, bstSum will contain the sum of its node values.
        if (isValidBST(root)) {
            return bstSum;  // Return the computed sum if the subtree is valid
        }
        return -1; // Return -1 to indicate that the subtree is not a valid BST
    }

    private boolean isValidBST(TreeNode root) {
        if (root == null) {
            return true; // An empty subtree is considered a valid BST
        }

        // Recursively check the left subtree.
        if (!isValidBST(root.left)) {
            return false;
        }

        // Validate the current node:
        // The current node's value must be greater than the previous node's value in the inorder traversal.
        if (previousNode != null && previousNode.val >= root.val) {
            return false; // Violation of BST property
        }
        
        bstSum += root.val; // Accumulate the current node's value into bstSum
        previousNode = root; // Update previousNode to the current node

        // Recursively check the right subtree.
        return isValidBST(root.right);
    }
}


//Optimal approach

class Solution {
    // Helper class to store information about a subtree
    private static class NodeInfo {
        private boolean isBst; // Tells whether the subtree rooted at the node is a valid BST
        private int max;       // Maximum value in the subtree
        private int min;       // Minimum value in the subtree
        private int sum;      // Sum of the nodes in the subtree

        // Constructor for leaf or internal nodes with full data
        NodeInfo(boolean isBst, int max, int min, int sum) {
            this.isBst = isBst;
            this.max = max;
            this.min = min;
            this.sum = sum;
        }

        // Constructor for null nodes (base case) â€“ considered valid BSTs with extreme min/max
        NodeInfo(boolean isBst) {
            this.isBst = isBst;
            this.max = Integer.MIN_VALUE;
            this.min = Integer.MAX_VALUE;
            this.sum = 0;
        }
    }

    // Variable to track the maximum size of BST found in the binary tree
    private int maxSum;

    public int maxSumBST(TreeNode root) {
        maxSum = 0; // Initialize the maximum BST sum to 0
        largestBstSize(root); // Trigger post-order traversal to compute BST sum
        return maxSum; // Return the largest BST sum found
    }

    private NodeInfo largestBstSize(TreeNode root) {
        // Base case: null node is treated as a valid BST with sum 0
        if (root == null) {
            return new NodeInfo(true);
        }

        // Recursively get BST info from left and right subtrees
        NodeInfo left = largestBstSize(root.left);
        NodeInfo right = largestBstSize(root.right);

        /**
         * Check if current node with its left and right subtrees forms a valid BST:
         *  - left and right subtrees must themselves be BSTs
         *  - root's data must be greater than the max value in left subtree
         *  - root's data must be less than the min value in right subtree
         */
        if (left.isBst && right.isBst && root.val > left.max && root.val < right.min) {

            // Compute the sum of current BST = left.sum + right.sum + root.val (for current root)
            int sum = left.sum + right.sum + root.val;

            /**
             * Compute new max and min for the current subtree:
             * - max = max value between root and right subtree
             *   (root might be the max if right is null)
             * - min = min value between root and left subtree
             *   (root might be the min if left is null)
             */
            int max = Math.max(root.val, right.max);
            int min = Math.min(root.val, left.min);

            // Update global maxSum if current BST is larger
            maxSum = Math.max(maxSum, sum);

            // Return new NodeInfo representing this subtree as a valid BST
            return new NodeInfo(true, max, min, sum);
        }

        /**
         * If the subtree is not a valid BST, return isBst = false
         * Other fields are irrelevant for invalid BSTs, so we use the basic constructor
         */
        return new NodeInfo(false);
    }
}
