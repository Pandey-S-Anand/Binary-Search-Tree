/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

//Naive approach

class Solution {
    // Variable to store the cumulative sum of all nodes in the BST
    private int sum;

    public TreeNode bstToGst(TreeNode root) {
        // Step 1: Find the total sum of all nodes in the original BST
        sum = findBSTSum(root);

        // Step 2: Traverse the tree and modify each node using the sum
        transformToGreaterSumTree(root);
        return root;
    }

    private int findBSTSum(TreeNode root) {
        if (root == null) {
            return 0;
        }

        int leftSum = findBSTSum(root.left); // Sum of left subtree
        int rightSum = findBSTSum(root.right); // Sum of right subtree

        return root.val + leftSum + rightSum; // Total sum for this subtree
    }

    /**
     * We do an **in-order traversal (left → node → right)**, but modify
     * each node's value by subtracting its current value from the running total `sum`,
     * which initially holds the total of all nodes in the BST.
     *
     * At each node:
     *  - Subtract the node's original value from the running total.
     *  - Update the node's value to the updated sum + its original value.
     *  - The updated value now reflects "original node value + sum of greater nodes".
     */
    private void transformToGreaterSumTree(TreeNode root) {
        if (root == null) {
            return;
        }

        // Recursively process the left subtree first (in-order traversal)
        transformToGreaterSumTree(root.left);

        // Update the running sum by excluding the current node's original value
        sum -= root.val;

        //Update node value with sum of all greater values
        root.val += sum;

        // Recursively process the right subtree
        transformToGreaterSumTree(root.right);
    }
}


//Optimal approach

class Solution {
    // Holds the running total of all node values processed so far (which are greater than the nodes yet to be visited in reverse in-order).
    private int sum;

    public TreeNode bstToGst(TreeNode root) {
        // Initialize the accumulator before traversal.
        sum = 0;
        // Perform reverse in-order traversal: right → node → left
        bstToGstHelper(root);
        return root;
    }

    private void bstToGstHelper(TreeNode node) {
        if (node == null) {
            // Base case: no node to process
            return;
        }

        // 1. Process right subtree first (all values > current node)
        bstToGstHelper(node.right);

        // 2. At this point, 'sum' holds the total of all original values > node.val so we add it to the current node's value.
        node.val += sum;

        // 3. Include this node's original value into 'sum' for subsequent (left subtree) nodes.
        sum = node.val;

        // 4. Process left subtree (values < current node)
        bstToGstHelper(node.left);
    }
}
