/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

/**
 * ✅ Valid BST and ❌ Invalid BST Example:
 * 
 * ❌ Invalid BST Example:
 * 
 *        5
 *       / \
 *      4   6
 *         / \
 *        3   7
 * 
 * This is NOT a valid BST because:
 * - The node 3 is in the right subtree of 5.
 * - But 3 < 5, which violates the BST rule.
 *
 * ✅ Valid BST Example:
 * 
 *        5
 *       / \
 *      3   8
 *     / \  / \
 *    2   4 7  10
 * 
 * This is a valid BST because:
 * - Left subtree (3, 2, 4) satisfies BST property (2 < 3 < 4).
 * - Right subtree (8, 7, 10) satisfies BST property (7 < 8 < 10).
 */ 

//Recursive approach

//Method 1

class Solution {
    public boolean isValidBST(TreeNode root) {
        // Call the helper function with the full valid range of a BST (-∞ to +∞)
        return isValidBST(root, Long.MIN_VALUE, Long.MAX_VALUE);
    }

    /*
     * Helper function to validate the BST by ensuring that each node's value lies within
     * a valid range defined by 'low' and 'high'.
     *
     * -----------------------------------
     * - For a valid Binary Search Tree (BST), each node must follow:
     *     -> All nodes in the left subtree < current node's value
     *     -> All nodes in the right subtree > current node's value
     *
     * - To enforce this, we pass down the allowed range (`low`, `high`) to every node:
     *     -> Initially: (-∞, +∞)
     *     -> For left child: (low, root.val)
     *     -> For right child: (root.val, high)
     *
     * - If a node’s value violates the range, it means the BST property is not satisfied.
     * - This check is applied recursively for all nodes.
     *
     * Example:
     *     For tree:
     *            10
     *           /  \
     *          5   15
     *             /  \
     *           12   20
     *
     *     Each node is checked within its allowed range:
     *     - 10 in (-∞, ∞)
     *     - 5 in (-∞, 10)
     *     - 15 in (10, ∞)
     *     - 12 in (10, 15)
     *     - 20 in (15, ∞)
     *     → All are valid ⇒ BST is valid.
     */

    private boolean isValidBST(TreeNode root, long low, long high) {
        // Base Case: If we reach a null node, it means all previous nodes followed BST rules.
        if (root == null) {
            return true;
        }

        // If the current node value is outside the valid range, it's not a BST.
        if (!(root.val > low && root.val < high)) {
            return false;
        }

        /*
         * Recursively check:
         * 1. Left subtree: Valid range is updated to (low, root.val)
         * 2. Right subtree: Valid range is updated to (root.val, high)
         */
        return isValidBST(root.left, low, root.val) && isValidBST(root.right, root.val, high);
    }
}


//Method 2

class Solution {
    private TreeNode prevNode;

    public boolean isValidBST(TreeNode root) {
        prevNode = null;
        /*
         * Since inorder traversal follows (L -> Root -> R), it naturally visits nodes in increasing order.
         * For a Binary Search Tree (BST), the inorder traversal will always produce elements in strictly increasing order.
         * If the inorder list is not strictly increasing, the tree is not a valid BST.
         */
        return inorderTraversal(root);
    }

    private boolean inorderTraversal(TreeNode root) {
        if (root == null) {
            return true;
        }

        if (!inorderTraversal(root.left)) {
            return false;
        }
        if (prevNode != null && prevNode.val >= root.val) {
            return false;
        }
        prevNode = root;
        return inorderTraversal(root.right);
    }
}
