// Since an inorder traversal of a BST produces elements in sorted order, we can directly use this property to flatten the BST into a sorted linked list.

//Bruteforce approach

class Solution {
    private List<Node> inorderTraversal;

    public Node flattenBST(Node root) {
        inorderTraversal = new ArrayList<>();
        // Perform inorder traversal to get nodes in sorted order
        getInorderTraversal(root);

        Node prevNode = inorderTraversal.get(0);
        // First node in the inorder traversal will always have it's left child as null

        for (int i = 1; i < inorderTraversal.size(); i++) {
            Node currentNode = inorderTraversal.get(i);
            // Link previous node right to the next node in inorder sequence
            prevNode.right = currentNode;
            // Set current node's left child to null as we are flattening into a linked list
            currentNode.left = null;
            prevNode = currentNode;
        }

        // Return the new root node of the flattened tree (first node in inorder traversal)
        return inorderTraversal.get(0);
    }

    private void getInorderTraversal(Node root) {
        if (root == null) {
            return;
        }

        getInorderTraversal(root.left);
        inorderTraversal.add(root);
        getInorderTraversal(root.right);
    }
}


//Better Approach

class Solution {
    // Pointer to keep track of the previous processed node in the inorder traversal
    private Node prevNode;
    
    // Pointer to store the head (new root) of the flattened BST
    private Node head;

    public Node flattenBST(Node root) {
        // Initialize pointers to null before starting the traversal
        prevNode = head = null;
        
        // Perform inorder traversal and flatten the BST in place
        getInorderTraversal(root);
        
        // Return the new root (head) of the flattened BST
        return head;
    }

    private void getInorderTraversal(Node root) {
        if (root == null) {
            return;
        }

        // Recursively traverse the left subtree
        getInorderTraversal(root.left);

        // If this is the first node in the inorder sequence, set it as head
        if (prevNode == null) {
            head = root;
        } else {
            // Link the previous node's right pointer to the current node
            prevNode.right = root;
            // Since we're creating a singly linked list, set the left pointer to null
            root.left = null;
        }

        // Update prevNode to the current node before moving to the right subtree
        prevNode = root;

        // Recursively traverse the right subtree
        getInorderTraversal(root.right);
    }
}


//Optimal approach

class Solution {
    private Node head = null; // Pointer to the head of the flattened tree (new root)
    private Node tail = null; // Pointer to keep track of the last node in the flattened tree

    public Node flattenBST(Node root) {
        Node currentNode = root;

        while (currentNode != null) {
            if (currentNode.left == null) {
                // If there is no left child, append the current node to the flattened tree
                append(currentNode);
                currentNode = currentNode.right; // Move to the right child
            } else {
                // Find the rightmost node of the left subtree
                Node rightMostNode = currentNode.left;
                while (rightMostNode.right != null) {
                    rightMostNode = rightMostNode.right;
                }

                // Connect the rightmost node of the left subtree to the current node
                rightMostNode.right = currentNode;

                // Move current pointer to the left child and nullify the left pointer
                Node temp = currentNode;
                currentNode = currentNode.left;
                temp.left = null;
            }
        }

        return head; // Return the new root of the flattened tree (smallest node)
    }

    private void append(Node node) {
        if (head == null) {
            // If this is the first node being added, initialize head and tail
            head = tail = node;
        } else {
            // Link the current node to the flattened list and update tail
            tail.right = node;
            tail = node;
        }
    }
}
