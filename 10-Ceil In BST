class Tree {
    int findCeil(Node root, int key) {
        int ceil = -1;

        // Traverse the tree starting from the root.
        while (root != null) {
            
            // If the key is equal to the current node's data, then it is the ceil itself.
            if (key == root.data) {
                return root.data;
            }
            
            // If the key is smaller than the current node, then this node could be a possible ceil. But we try to find a smaller candidate in the left subtree.
            if (key < root.data) {
                ceil = root.data;
                root = root.left;
            } else {  // If the key is greater, discard the current node and move to the right to find a larger value.
                root = root.right;
            }
        }

        // Return the closest value found that is > key, or -1 if none exists.
        return ceil;
    }
}
