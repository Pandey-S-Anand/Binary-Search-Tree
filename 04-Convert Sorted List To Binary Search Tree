/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

class Solution {
    public TreeNode sortedListToBST(ListNode head) {
        // Base case: if the list is empty, return null (no tree).
        if (head == null) {
            return null;
        }

        // Base case: if the list has only one node, it becomes a leaf node in BST.
        if (head.next == null) {
            return new TreeNode(head.val);
        }

        /*
         * Step 1: Find the middle node of the list which will become the root of the BST.
         * Also, split the list into two halves:
         *   - Left half: from head up to (but not including) midNode
         *   - Right half: from midNode.next onward
         */
        ListNode midNode = splitAndExtractMiddle(head); // middle node becomes the root
        ListNode rightHalfHead = midNode.next; // save start of right half
        midNode.next = null; // cut connection to split list

        // Step 2: Create the root TreeNode with middle value
        TreeNode root = new TreeNode(midNode.val);

        // Step 3: Recursively build the left subtree from left half of the list
        root.left = sortedListToBST(head);

        // Step 4: Recursively build the right subtree from right half of the list
        root.right = sortedListToBST(rightHalfHead);

        return root;
    }

    private ListNode splitAndExtractMiddle(ListNode head) {
        ListNode slow = head; // will point to middle node
        ListNode fast = head; // moves twice as fast as slow
        ListNode slowPrev = null; // node before slow (used to split the list)

        // Traverse the list to find the middle node
        while (fast != null && fast.next != null) {
            slowPrev = slow;
            slow = slow.next;
            fast = fast.next.next;
        }

        /*
         * Disconnect the left half of the list from the middle node.
         * After this, 'head' to 'slowPrev' is one half,
         * and 'slow' to end is the other half.
         */
        slowPrev.next = null;

        return slow;
    }
}
